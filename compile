#!/bin/sh

# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    compile                                            :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: abarnett <alanbarnett328@gmail.com>        +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/03/31 03:28:35 by abarnett          #+#    #+#              #
#                                                     ###   ########.fr        #
#                                                                              #
#    This script's job is to untar a package, properly make and install it,    #
#    and then delete it's folder.                                              #
#                                                                              #
# **************************************************************************** #

# Log directory for all output
LOG_DIR=$LFS/sources/logs

# Make the log directory if it doesn't exist
if [ ! -d "$LOG_DIR" ]; then
	printf "Making log dir\n"
	mkdir -v "$LOG_DIR"
fi

# Flags for make
# -j2 uses two cores when compiling
MAKEFLAGS='-j2'

# Current task, for printing status
CUR_TASK=1
# Number of tasks, for printing status
NUM_TASKS=44

# Change directory with pushd (partnered with a popd at the end)
# Each package needs to start compiling from the sources folder
pushd $LFS/sources

# Package configuration goes below this line
# **************************************************************************** #

## Binutils Pass 1 {{{
#printf "(%3d/%3d) Extracting binutils..." $CUR_TASK $NUM_TASKS
#tar -xf binutils-2.32.tar.xz
#printf "done!\n"; ((++CUR_TASK))
#
## Binutils wants to be made in a build folder
#mkdir -v binutils-2.32/build && pushd binutils-2.32/build
#
#printf "(%3d/%3d) Compiling binutils..." $CUR_TASK $NUM_TASKS
#
#../configure					\
#	--prefix=/tools				\
#	--with-sysroot=$LFS			\
#	--with-libpath=/tools/lib	\
#	--target=$LFS_TGT			\
#	--disable-nls				\
#	--disable-werror			>> "$LOG_DIR/binutils_pass1.log"
#
#make $MAKEFLAGS					>> "$LOG_DIR/binutils_pass1.log"
#
## I copied this from the bible, but I'm really not sure why it needs to be
## a switch. looks like maybe for the addition of more later?
## Anyway, it creates the lib folder and symlinks lib64 to it in /tools
#case $(uname -m) in
#	x86_64) mkdir -v /tools/lib && ln -sv lib /tools/lib64 ;;
#esac
#
#make $MAKEFLAGS install			>> "$LOG_DIR/binutils_pass1.log"
#
#printf "done!\n"; ((++CUR_TASK))
#
## Leave binutils folder, back to sources
#popd
#
#printf "(%3d/%3d) Cleaning binutils..." $CUR_TASK $NUM_TASKS
#rm -rf binutils-2.32
#printf "done!\n"; ((++CUR_TASK))
## }}}
#
## 3 tasks
#
## GCC Pass 1 {{{
#printf "(%3d/%3d) Extracting GCC..." $CUR_TASK $NUM_TASKS
#tar -xf gcc-8.2.0.tar.xz
#printf "done!\n"; ((++CUR_TASK))
#
## pushd into gcc folder so I can extract other things into here
#pushd gcc-8.2.0
#
#printf "(%3d/%3d) Extracting mpfr..." $CUR_TASK $NUM_TASKS
#tar -xf ../mpfr-4.0.2.tar.xz
#mv mpfr-4.0.2 mpfr
#printf "done!\n"; ((++CUR_TASK))
#
#printf "(%3d/%3d) Extracting gmp..." $CUR_TASK $NUM_TASKS
#tar -xf ../gmp-6.1.2.tar.xz
#mv gmp-6.1.2 gmp
#printf "done!\n"; ((++CUR_TASK))
#
#printf "(%3d/%3d) Extracting mpc..." $CUR_TASK  $NUM_TASKS
#tar -xf ../mpc-1.1.0.tar.gz
#mv mpc-1.1.0 mpc
#printf "done!\n"; ((++CUR_TASK))
#
## The following command will change the location of GCC's default dynamic
## linker to use the one installed in /tools. It also removes /usr/include
## from GCC's include search path.
## http://www.linuxfromscratch.org/lfs/view/stable/chapter05/gcc-pass1.html
#for file in gcc/config/{linux,i386/linux{,64}}.h
#do
#	cp -uv $file{,.orig}
#	sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
#		-e 's@/usr@/tools@g' $file.orig > $file
#	echo '
##undef STANDARD_STARTFILE_PREFIX_1
##undef STANDARD_STARTFILE_PREFIX_2
##define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
##define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
#	touch $file.orig
#done
#
## I assume this will assist with cross compilation later. I'm not sure why I
## would do this like this yet.
#case $(uname -m) in
#	x86_64)
#		sed -e '/m64=/s/lib64/lib/' \
#			-i.orig gcc/config/i386/t-linux64
#		;;
#esac
#
## Go into build folder to compile
#mkdir -v build && pushd build
#
#printf "(%3d/%3d) Compiling gcc..." $CUR_TASK $NUM_TASKS
#
#../configure										\
#	--target=$LFS_TGT								\
#	--prefix=/tools									\
#	--with-glibc-version=2.11						\
#	--with-sysroot=$LFS								\
#	--with-newlib									\
#	--without-headers								\
#	--with-local-prefix=/tools						\
#	--with-native-system-header-dir=/tools/include	\
#	--disable-nls									\
#	--disable-shared								\
#	--disable-multilib								\
#	--disable-decimal-float							\
#	--disable-threads								\
#	--disable-libatomic								\
#	--disable-libgomp								\
#	--disable-libmpx								\
#	--disable-libquadmath							\
#	--disable-libssp								\
#	--disable-libvtv								\
#	--disable-libstdcxx								\
#	--enable-languages=c,c++						>> "$LOG_DIR/gcc_pass1.log"
#make $MAKEFLAGS										>> "$LOG_DIR/gcc_pass1.log"
#make $MAKEFLAGS install								>> "$LOG_DIR/gcc_pass1.log"
#
#printf "done!\n"; ((++CUR_TASK))
#
## Back out of build
#popd
#
## Back out of GCC
#popd
#
#printf "(%3d/%3d) Cleaning gcc..." $CUR_TASK $NUM_TASKS
#rm -rf gcc-8.2.0
#printf "done!\n"; ((++CUR_TASK))
## }}}
#
## 9 tasks
#
## Linux API Headers {{{
#printf "(%3d/%3d) Extracting Linux Headers..." $CUR_TASK $NUM_TASKS
#tar -xf linux-4.20.12.tar.xz
#printf "done!\n"; ((++CUR_TASK))
#
#pushd linux-4.20.12
#printf "(%3d/%3d) Installing Linux Headers..." $CUR_TASK $NUM_TASKS
#make mrproper								>> "$LOG_DIR/linux_headers.log"
#make INSTALL_HDR_PATH=dest headers_install	>> "$LOG_DIR/linux_headers.log"
#cp -rv dest/include/* /tools/include		>> "$LOG_DIR/linux_headers.log"
#printf "done!\n"; ((++CUR_TASK))
#popd
#
#printf "(%3d/%3d) Cleaning Linux Headers..." $CUR_TASK $NUM_TASKS
#rm -rf linux-4.20.12
#printf "done!\n"; ((++CUR_TASK))
## }}}
#
## 12 tasks
#
## Glibc {{{
#printf "(%3d/%3d) Extracting Glibc..." $CUR_TASK $NUM_TASKS
#tar -xf glibc-2.29.tar.xz
#printf "done!\n"; ((++CUR_TASK))
#
#mkdir -v glibc-2.29/build && pushd glibc-2.29/build
#
#printf "(%3d/%3d) Compiling Glibc..." $CUR_TASK $NUM_TASKS
#../configure							\
#	--prefix=/tools						\
#	--host=$LFS_TGT						\
#	--build=$(../scripts/config.guess)	\
#	--enable-kernel=3.2					\
#	--with-headers=/tools/include		>> "$LOG_DIR/glibc.log"
#make $MAKEFLAGS							>> "$LOG_DIR/glibc.log"
#make $MAKEFLAGS install					>> "$LOG_DIR/glibc.log"
#printf "done!\n"; ((++CUR_TASK))
#
## Leave glibc/build, back to sources
#popd
#
## Test Glibc {{{
#printf "Test that gcc is working...\n"
#echo 'int main(){}' > dummy.c
#$LFS_TGT-gcc dummy.c
#readelf -l a.out | grep --color=auto ': /tools'
#printf "Does the above line say \"Requesting program interpreter\"? (Y/n): "
#read CONTINUE
#if [ -z "$CONTINUE" ] || [ "$CONTINUE" = 'y' ] || [ "$CONTINUE" = 'Y' ]; then
#	echo "Moving along then"
#else
#	echo "Alright, figure it out. Quitting (without deleting dummy.c or a.out)..."
#	exit
#fi
#rm -v dummy.c a.out
## }}}
#
#printf "(%3d/%3d) Cleaning Glibc..." $CUR_TASK $NUM_TASKS
#rm -rf glibc-2.29
#printf "done!\n"; ((++CUR_TASK))
## }}}
#
## 15 tasks
#
## Libstdc++ from GCC {{{
#printf "(%3d/%3d) Extracting GCC (for libstdc++)..." $CUR_TASK $NUM_TASKS
#tar -xf gcc-8.2.0.tar.xz
#printf "done!\n"; ((++CUR_TASK))
#
#mkdir -v gcc-8.2.0/build &&  pushd gcc-8.2.0/build
#
#printf "(%3d/%3d) Compiling libstdc++..." $CUR_TASK $NUM_TASKS
#../libstdc++-v3/configure		\
#	--host=$LFS_TGT				\
#	--prefix=/tools				\
#	--disable-multilib			\
#	--disable-nls				\
#	--disable-libstdcxx-threads	\
#	--disable-libstdcxx-pch		\
#	--with-gxx-include-dir=/tools/$LFS_TGT/include/c++/8.2.0 \
#								>> "$LOG_DIR/libstdc++.log"
#make $MAKEFLAGS					>> "$LOG_DIR/libstdc++.log"
#make $MAKEFLAGS install			>> "$LOG_DIR/libstdc++.log"
#printf "done!\n"; ((++CUR_TASK))
#
## Leave gcc/build, return to sources
#popd
#
#printf "(%3d/%3d) Cleaning GCC (for libstdc++)..." $CUR_TASK $NUM_TASKS
#rm -rf gcc-8.2.0
#printf "done!\n"; ((++CUR_TASK))
## }}}
#
### 18 tasks
#
## Binutils pass 2 {{{
#printf "(%3d/%3d) Extracting binutils again..." $CUR_TASK $NUM_TASKS
#tar -xf binutils-2.32.tar.xz
#printf "done!\n"; ((++CUR_TASK))
#
## Binutils wants to be made in a build folder
#mkdir -v binutils-2.32/build && pushd binutils-2.32/build
#
#printf "(%3d/%3d) Compiling binutils again..." $CUR_TASK $NUM_TASKS
#
#CC=$LFS_TGT-gcc					\
#AR=$LFS_TGT-ar					\
#RANLIB=$LFS_TGT-ranlib			\
#../configure					\
#	--prefix=/tools				\
#	--disable-nls				\
#	--disable-werror			\
#	--with-lib-path=/tools/lib	\
#	--with-sysroot				>> "$LOG_DIR/binutils_pass2.log"
#make $MAKEFLAGS					>> "$LOG_DIR/binutils_pass2.log"
#make $MAKEFLAGS install			>> "$LOG_DIR/binutils_pass2.log"
#
## Prepares the linker for readjusting later
#make -C ld clean
#make -C ld LIB_PATH=/usr/lib:/lib
#cp -v ld/ld-new /tools/bin
#
#printf "done!\n"; ((++CUR_TASK))
#
## Leave binutils folder, back to sources
#popd
#
#printf "(%3d/%3d) Cleaning binutils again..." $CUR_TASK $NUM_TASKS
#rm -rf binutils-2.32
#printf "done!\n"; ((++CUR_TASK))
## }}}
#
## 21 tasks
#
## GCC Pass 2 {{{
#printf "(%3d/%3d) Extracting GCC again (pass 2!)..." $CUR_TASK $NUM_TASKS
#tar -xf gcc-8.2.0.tar.xz
#printf "done!\n"; ((++CUR_TASK))
#
## pushd into gcc folder so I can extract other things into here
#pushd gcc-8.2.0
#
#printf "(%3d/%3d) Extracting mpfr again..." $CUR_TASK $NUM_TASKS
#tar -xf ../mpfr-4.0.2.tar.xz
#mv mpfr-4.0.2 mpfr
#printf "done!\n"; ((++CUR_TASK))
#
#printf "(%3d/%3d) Extracting gmp again..." $CUR_TASK $NUM_TASKS
#tar -xf ../gmp-6.1.2.tar.xz
#mv gmp-6.1.2 gmp
#printf "done!\n"; ((++CUR_TASK))
#
#printf "(%3d/%3d) Extracting mpc again..." $CUR_TASK  $NUM_TASKS
#tar -xf ../mpc-1.1.0.tar.gz
#mv mpc-1.1.0 mpc
#printf "done!\n"; ((++CUR_TASK))
#
## Generate the limits.h file
#cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
#  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h
#
## The following command will change the location of GCC's default dynamic
## linker to use the one installed in /tools. It also removes /usr/include
## from GCC's include search path.
## http://www.linuxfromscratch.org/lfs/view/stable/chapter05/gcc-pass1.html
#for file in gcc/config/{linux,i386/linux{,64}}.h
#do
#	cp -uv $file{,.orig}
#	sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
#		-e 's@/usr@/tools@g' $file.orig > $file
#	echo '
##undef STANDARD_STARTFILE_PREFIX_1
##undef STANDARD_STARTFILE_PREFIX_2
##define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
##define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
#	touch $file.orig
#done
#
## I assume this will assist with cross compilation later. I'm not sure why I
## would do this like this yet.
#case $(uname -m) in
#	x86_64)
#		sed -e '/m64=/s/lib64/lib/' \
#			-i.orig gcc/config/i386/t-linux64
#		;;
#esac
#
#mkdir -v build && pushd build
#
#printf "(%3d/%3d) Compiling gcc again (part 2!!)..." $CUR_TASK $NUM_TASKS
#
#CC=$LFS_TGT-gcc										\
#CXX=$LFS_TGT-g++									\
#AR=$LFS_TGT-ar										\
#RANLIB=$LFS_TGT-ranlib								\
#../configure										\
#	--prefix=/tools									\
#	--with-local-prefix=/tools						\
#	--with-native-system-header-dir=/tools/include	\
#	--enable-languages=c,c++						\
#	--disable-libstdcxx-pch							\
#	--disable-multilib								\
#	--disable-bootstrap								\
#	--disable-libgomp								>> "$LOG_DIR/gcc_pass2.log"
#make $MAKEFLAGS										>> "$LOG_DIR/gcc_pass2.log"
#make $MAKEFLAGS install								>> "$LOG_DIR/gcc_pass2.log"
#
## Link gcc to cc, the system c compiler
#ln -sv gcc /tools/bin/cc
#
#printf "done!\n"; ((++CUR_TASK))
#
## Back out of build
#popd
#
## Back out of GCC
#popd
#
## Test GCC {{{
#printf "Test that gcc is working...\n"
#echo 'int main(){}' > dummy.c
#cc dummy.c
#readelf -l a.out | grep --color=auto ': /tools'
#printf "Does the above line say \"Requesting program interpreter\"? (Y/n): "
#read CONTINUE
#if [ -z "$CONTINUE" ] || [ "$CONTINUE" = 'y' ] || [ "$CONTINUE" = 'Y' ]; then
#	echo "Moving along then"
#else
#	echo "Alright, figure it out. Quitting (without deleting dummy.c or a.out)..."
#	exit
#fi
#rm dummy.c a.out
## }}}
#
#printf "(%3d/%3d) Cleaning gcc again..." $CUR_TASK $NUM_TASKS
#rm -rf gcc-8.2.0
#printf "done!\n"; ((++CUR_TASK))
#
## }}}
#
## 27 tasks
#
## TCL {{{
#printf "(%3d/%3d) Extracting TCL..." $CUR_TASK $NUM_TASKS
#tar -xf tcl8.6.9-src.tar.gz
#printf "done!\n"; ((++CUR_TASK))
#
#pushd tcl8.6.9/unix
#printf "(%3d/%3d) Compiling TCL..." $CUR_TASK $NUM_TASKS
#./configure --prefix=/tools				>> "$LOG_DIR/tcl.log"
#make $MAKEFLAGS							>> "$LOG_DIR/tcl.log"
#make $MAKEFLAGS install					>> "$LOG_DIR/tcl.log"
#chmod -v u+w /tools/lib/libtcl8.6.so
#make $MAKEFLAGS install-private-headers	>> "$LOG_DIR/tcl.log"
#ln -sv tclsh8.6 /tools/bin/tclsh
#printf "done!\n"; ((++CUR_TASK))
#popd
#
#printf "(%3d/%3d) Cleaning TCL..." $CUR_TASK $NUM_TASKS
#rm -rf tcl8.6.9
#printf "done!\n"; ((++CUR_TASK))
## }}}
#
## 29 tasks
#
## Expect {{{
#printf "(%3d/%3d) Extracting expect..." $CUR_TASK $NUM_TASKS
#tar -xf expect5.45.4.tar.gz
#printf "done!\n"; ((++CUR_TASK))
#
#pushd expect5.45.4
#printf "(%3d/%3d) Compiling expect..." $CUR_TASK $NUM_TASKS
#
#cp -v configure{,.orig}
#sed 's:/usr/local/bin:/bin:' configure.orig > configure
#
#./configure					\
#	--prefix=/tools			\
#	--with-tcl=/tools/lib	\
#	--with-tclinclude=/tools/include	>> "$LOG_DIR/expect.log"
#make $MAKEFLAGS							>> "$LOG_DIR/expect.log"
#make $MAKEFLAGS SCRIPTS="" install		>> "$LOG_DIR/expect.log"
#printf "done!\n"; ((++CUR_TASK))
#
## Back to sources
#popd
#
#printf "(%3d/%3d) Cleaning expect..." $CUR_TASK $NUM_TASKS
#rm -rf expect5.45.4
#printf "done!\n"; ((++CUR_TASK))
## }}}
#
## 32 tasks
#
## DejaGNU {{{
#printf "(%3d/%3d) Extracting DejaGNU..." $CUR_TASK $NUM_TASKS
#tar -xf dejagnu-1.6.2.tar.gz
#printf "done!\n"; ((++CUR_TASK))
#
#pushd dejagnu-1.6.2
#printf "(%3d/%3d) Compiling DejaGNU..." $CUR_TASK $NUM_TASKS
#
#./configure --prefix=/tools		>> "$LOG_DIR/DejaGNU.log"
#make $MAKEFLAGS install			>> "$LOG_DIR/DejaGNU.log"
#
## Test what we've done
#make check						>> "$LOG_DIR/DejaGNU.log"
#
#printf "done!\n"; ((++CUR_TASK))
#
## Back to sources
#popd
#
#printf "(%3d/%3d) Cleaning DejaGNU..." $CUR_TASK $NUM_TASKS
#rm -rf dejagnu-1.6.2
#printf "done!\n"; ((++CUR_TASK))
## }}}
#
## 35 tasks
#
## m4 {{{
#printf "(%3d/%3d) Extracting m4..." $CUR_TASK $NUM_TASKS
#tar -xf m4-1.4.18.tar.xz
#printf "done!\n"; ((++CUR_TASK))
#
#pushd m4-1.4.18
#printf "(%3d/%3d) Compiling ..." $CUR_TASK $NUM_TASKS
#
## Make some fixes required by glibc-2.28
#sed -i 's/IO_ftrylockfile/IO_EOF_SEEN/' lib/*.c
#echo "#define _IO_IN_BACKUP 0x100" >> lib/stdio-impl.h
#
#./configure --prefix=/tools		>> "$LOG_DIR/m4.log"
#make $MAKEFLAGS					>> "$LOG_DIR/m4.log"
#make $MAKEFLAGS install			>> "$LOG_DIR/m4.log"
#
#printf "done!\n"; ((++CUR_TASK))
#
## Back to sources
#popd
#
#printf "(%3d/%3d) Cleaning m4..." $CUR_TASK $NUM_TASKS
#rm -rf m4-1.4.18
#printf "done!\n"; ((++CUR_TASK))
## }}}
#
## 38 tasks
#
## Ncurses {{{
#printf "(%3d/%3d) Extracting ncurses..." $CUR_TASK $NUM_TASKS
#tar -xf ncurses-6.1.tar.gz
#printf "done!\n"; ((++CUR_TASK))
#
#pushd ncurses-6.1
#printf "(%3d/%3d) Compiling ncurses..." $CUR_TASK $NUM_TASKS
#
#./configure					\
#	--prefix=/tools			\
#	--with-shared			\
#	--without-debug			\
#	--without-ada			\
#	--enable-widec			\
#	--enable-overwrite		>> "$LOG_DIR/ncurses.log"
#make $MAKEFLAGS				>> "$LOG_DIR/ncurses.log"
#make $MAKEFLAGS install		>> "$LOG_DIR/ncurses.log"
#ln -sv libncursesw.so /tools/lib/libncurses.so
#
#printf "done!\n"; ((++CUR_TASK))
#
## Back to sources
#popd
#
#printf "(%3d/%3d) Cleaning ncurses..." $CUR_TASK $NUM_TASKS
#rm -rf ncurses-6.1
#printf "done!\n"; ((++CUR_TASK))
## }}}
#
## 41 tasks
#
## Bash {{{
#printf "(%3d/%3d) Extracting bash..." $CUR_TASK $NUM_TASKS
#tar -xf bash-5.0.tar.gz
#printf "done!\n"; ((++CUR_TASK))
#
#pushd bash-5.0
#printf "(%3d/%3d) Compiling bash..." $CUR_TASK $NUM_TASKS
#
#./configure					\
#	--prefix=/tools			\
#	--without-bash-malloc	>> "$LOG_DIR/bash.log"
#make $MAKEFLAGS				>> "$LOG_DIR/bash.log"
#make $MAKEFLAGS install		>> "$LOG_DIR/bash.log"
#
## Symlink sh to bash. Yuck.
## When I'm not so rigidly following the book, this will most certainly be dash.
#ln -sv bash /tools/bin/sh
#
#printf "done!\n"; ((++CUR_TASK))
#
## Back to sources
#popd
#
#printf "(%3d/%3d) Cleaning bash..." $CUR_TASK $NUM_TASKS
#rm -rf bash-5.0
#printf "done!\n"; ((++CUR_TASK))
## }}}
#
## 44 tasks
#
# Bison {{{
printf "(%3d/%3d) Extracting bison..." $CUR_TASK $NUM_TASKS
tar -xf bison-3.3.2.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd bison-3.3.2
printf "(%3d/%3d) Compiling bison..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools		>> "$LOG_DIR/bison.log"
make $MAKEFLAGS			   		>> "$LOG_DIR/bison.log"
make $MAKEFLAGS install	   		>> "$LOG_DIR/bison.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning bison..." $CUR_TASK $NUM_TASKS
rm -rf bison-3.3.2
printf "done!\n"; ((++CUR_TASK))
# }}}

# Return to previous working directory, discard the output
popd > /dev/null

exit

# Dummy {{{
printf "(%3d/%3d) Extracting TARGET..." $CUR_TASK $NUM_TASKS
tar -xf 
printf "done!\n"; ((++CUR_TASK))

pushd 
printf "(%3d/%3d) Compiling TARGET..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools				>> "$LOG_DIR/TARGET.log"
make $MAKEFLAGS							>> "$LOG_DIR/TARGET.log"
make $MAKEFLAGS install					>> "$LOG_DIR/TARGET.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning TARGET..." $CUR_TASK $NUM_TASKS
rm -rf 
printf "done!\n"; ((++CUR_TASK))
# }}}

# Packages {{{
Python-3.7.2.tar.xz
XML-Parser-2.44.tar.gz
acl-2.2.53.tar.gz
attr-2.4.48.tar.gz
autoconf-2.69.tar.xz
automake-1.16.1.tar.xz
bc-1.07.1.tar.gz
bzip2-1.0.6-install_docs-1.patch
bzip2-1.0.6.tar.gz
check-0.12.0.tar.gz
coreutils-8.30-i18n-1.patch
coreutils-8.30.tar.xz
dbus-1.12.12.tar.gz
diffutils-3.7.tar.xz
e2fsprogs-1.44.5.tar.gz
elfutils-0.176.tar.bz2
eudev-3.2.7.tar.gz
expat-2.2.6.tar.bz2
file-5.36.tar.gz
findutils-4.6.0.tar.gz
flex-2.6.4.tar.gz
gawk-4.2.1.tar.xz
gdbm-1.18.1.tar.gz
gettext-0.19.8.1.tar.xz
glibc-2.29-fhs-1.patch
gperf-3.1.tar.gz
grep-3.3.tar.xz
groff-1.22.4.tar.gz
grub-2.02.tar.xz
gzip-1.10.tar.xz
iana-etc-2.30.tar.bz2
inetutils-1.9.4.tar.xz
intltool-0.51.0.tar.gz
iproute2-4.20.0.tar.xz
kbd-2.0.4-backspace-1.patch
kbd-2.0.4.tar.xz
kmod-26.tar.xz
less-530.tar.gz
lfs-bootscripts-20180820.tar.bz2
libcap-2.26.tar.xz
libffi-3.2.1.tar.gz
libpipeline-1.5.1.tar.gz
libtool-2.4.6.tar.xz
make-4.2.1.tar.bz2
man-db-2.8.5.tar.xz
man-pages-4.16.tar.xz
md5sums
meson-0.49.2.tar.gz
ninja-1.9.0.tar.gz
openssl-1.1.1a.tar.gz
patch-2.7.6.tar.xz
perl-5.28.1.tar.xz
pkg-config-0.29.2.tar.gz
procps-ng-3.3.15.tar.xz
psmisc-23.2.tar.xz
python-3.7.2-docs-html.tar.bz2
readline-8.0.tar.gz
sed-4.7.tar.xz
shadow-4.6.tar.xz
sysklogd-1.5.1.tar.gz
sysvinit-2.93-consolidated-1.patch
sysvinit-2.93.tar.xz
tar-1.31.tar.xz
tcl8.6.9-src.tar.gz
texinfo-6.5.tar.xz
tzdata2018i.tar.gz
udev-lfs-20171102.tar.bz2
util-linux-2.33.1.tar.xz
vim-8.1.tar.bz2
xz-5.2.4.tar.xz
zlib-1.2.11.tar.xz
# }}}

# vim: foldmethod=marker foldmarker={{{,}}}

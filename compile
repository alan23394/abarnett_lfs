#!/bin/sh

# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    compile                                            :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: abarnett <alanbarnett328@gmail.com>        +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/03/31 03:28:35 by abarnett          #+#    #+#              #
#                                                     ###   ########.fr        #
#                                                                              #
#    This script's job is to untar a package, properly make and install it,    #
#    and then delete it's folder.                                              #
#                                                                              #
# **************************************************************************** #

# Log directory for all output
LOG_DIR=$LFS/sources/logs

# Make the log directory if it doesn't exist
if [ ! -d "$LOG_DIR" ]; then
	printf "Making log dir\n"
	mkdir -v "$LOG_DIR"
fi

# Flags for make
# -j2 uses two cores when compiling
MAKEFLAGS='-j2'

# Current task, for printing status
CUR_TASK=1
# Number of tasks, for printing status
NUM_TASKS=80

# Change directory with pushd (partnered with a popd at the end)
# Each package needs to start compiling from the sources folder
pushd $LFS/sources

# Package configuration goes below this line
# **************************************************************************** #

# Binutils Pass 1 {{{
printf "(%3d/%3d) Extracting binutils..." $CUR_TASK $NUM_TASKS
tar -xf binutils-2.32.tar.xz
printf "done!\n"; ((++CUR_TASK))

# Binutils wants to be made in a build folder
mkdir -v binutils-2.32/build && pushd binutils-2.32/build

printf "(%3d/%3d) Compiling binutils..." $CUR_TASK $NUM_TASKS

../configure					\
	--prefix=/tools				\
	--with-sysroot=$LFS			\
	--with-libpath=/tools/lib	\
	--target=$LFS_TGT			\
	--disable-nls				\
	--disable-werror			>> "$LOG_DIR/binutils_pass1.log"

make $MAKEFLAGS					>> "$LOG_DIR/binutils_pass1.log"

# I copied this from the bible, but I'm really not sure why it needs to be
# a switch. looks like maybe for the addition of more later?
# Anyway, it creates the lib folder and symlinks lib64 to it in /tools
case $(uname -m) in
	x86_64) mkdir -v /tools/lib && ln -sv lib /tools/lib64 ;;
esac

make $MAKEFLAGS install			>> "$LOG_DIR/binutils_pass1.log"

printf "done!\n"; ((++CUR_TASK))

# Leave binutils folder, back to sources
popd

printf "(%3d/%3d) Cleaning binutils..." $CUR_TASK $NUM_TASKS
rm -rf binutils-2.32
printf "done!\n"; ((++CUR_TASK))
# }}}

# GCC Pass 1 {{{
printf "(%3d/%3d) Extracting GCC..." $CUR_TASK $NUM_TASKS
tar -xf gcc-8.2.0.tar.xz
printf "done!\n"; ((++CUR_TASK))

# pushd into gcc folder so I can extract other things into here
pushd gcc-8.2.0

printf "(%3d/%3d) Extracting mpfr..." $CUR_TASK $NUM_TASKS
tar -xf ../mpfr-4.0.2.tar.xz
mv mpfr-4.0.2 mpfr
printf "done!\n"; ((++CUR_TASK))

printf "(%3d/%3d) Extracting gmp..." $CUR_TASK $NUM_TASKS
tar -xf ../gmp-6.1.2.tar.xz
mv gmp-6.1.2 gmp
printf "done!\n"; ((++CUR_TASK))

printf "(%3d/%3d) Extracting mpc..." $CUR_TASK  $NUM_TASKS
tar -xf ../mpc-1.1.0.tar.gz
mv mpc-1.1.0 mpc
printf "done!\n"; ((++CUR_TASK))

# The following command will change the location of GCC's default dynamic
# linker to use the one installed in /tools. It also removes /usr/include
# from GCC's include search path.
# http://www.linuxfromscratch.org/lfs/view/stable/chapter05/gcc-pass1.html
for file in gcc/config/{linux,i386/linux{,64}}.h
do
	cp -uv $file{,.orig}
	sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
		-e 's@/usr@/tools@g' $file.orig > $file
	echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
	touch $file.orig
done

# I assume this will assist with cross compilation later. I'm not sure why I
# would do this like this yet.
case $(uname -m) in
	x86_64)
		sed -e '/m64=/s/lib64/lib/' \
			-i.orig gcc/config/i386/t-linux64
		;;
esac

# Go into build folder to compile
mkdir -v build && pushd build

printf "(%3d/%3d) Compiling gcc..." $CUR_TASK $NUM_TASKS

../configure										\
	--target=$LFS_TGT								\
	--prefix=/tools									\
	--with-glibc-version=2.11						\
	--with-sysroot=$LFS								\
	--with-newlib									\
	--without-headers								\
	--with-local-prefix=/tools						\
	--with-native-system-header-dir=/tools/include	\
	--disable-nls									\
	--disable-shared								\
	--disable-multilib								\
	--disable-decimal-float							\
	--disable-threads								\
	--disable-libatomic								\
	--disable-libgomp								\
	--disable-libmpx								\
	--disable-libquadmath							\
	--disable-libssp								\
	--disable-libvtv								\
	--disable-libstdcxx								\
	--enable-languages=c,c++						>> "$LOG_DIR/gcc_pass1.log"
make $MAKEFLAGS										>> "$LOG_DIR/gcc_pass1.log"
make $MAKEFLAGS install								>> "$LOG_DIR/gcc_pass1.log"

printf "done!\n"; ((++CUR_TASK))

# Back out of build
popd

# Back out of GCC
popd

printf "(%3d/%3d) Cleaning gcc..." $CUR_TASK $NUM_TASKS
rm -rf gcc-8.2.0
printf "done!\n"; ((++CUR_TASK))
# }}}

# Linux API Headers {{{
printf "(%3d/%3d) Extracting Linux Headers..." $CUR_TASK $NUM_TASKS
tar -xf linux-4.20.12.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd linux-4.20.12
printf "(%3d/%3d) Installing Linux Headers..." $CUR_TASK $NUM_TASKS
make mrproper								>> "$LOG_DIR/linux_headers.log"
make INSTALL_HDR_PATH=dest headers_install	>> "$LOG_DIR/linux_headers.log"
cp -rv dest/include/* /tools/include		>> "$LOG_DIR/linux_headers.log"
printf "done!\n"; ((++CUR_TASK))
popd

printf "(%3d/%3d) Cleaning Linux Headers..." $CUR_TASK $NUM_TASKS
rm -rf linux-4.20.12
printf "done!\n"; ((++CUR_TASK))
# }}}

# Glibc {{{
printf "(%3d/%3d) Extracting Glibc..." $CUR_TASK $NUM_TASKS
tar -xf glibc-2.29.tar.xz
printf "done!\n"; ((++CUR_TASK))

mkdir -v glibc-2.29/build && pushd glibc-2.29/build

printf "(%3d/%3d) Compiling Glibc..." $CUR_TASK $NUM_TASKS
../configure							\
	--prefix=/tools						\
	--host=$LFS_TGT						\
	--build=$(../scripts/config.guess)	\
	--enable-kernel=3.2					\
	--with-headers=/tools/include		>> "$LOG_DIR/glibc.log"
make $MAKEFLAGS							>> "$LOG_DIR/glibc.log"
make $MAKEFLAGS install					>> "$LOG_DIR/glibc.log"
printf "done!\n"; ((++CUR_TASK))

# Leave glibc/build, back to sources
popd

# Test Glibc {{{
printf "Test that gcc is working...\n"
echo 'int main(){}' > dummy.c
$LFS_TGT-gcc dummy.c
readelf -l a.out | grep --color=auto ': /tools'
printf "Does the above line say \"Requesting program interpreter\"? (Y/n): "
read CONTINUE
if [ -z "$CONTINUE" ] || [ "$CONTINUE" = 'y' ] || [ "$CONTINUE" = 'Y' ]; then
	echo "Moving along then"
else
	echo "Alright, figure it out. Quitting (without deleting dummy.c or a.out)..."
	exit
fi
rm -v dummy.c a.out
# }}}

printf "(%3d/%3d) Cleaning Glibc..." $CUR_TASK $NUM_TASKS
rm -rf glibc-2.29
printf "done!\n"; ((++CUR_TASK))
# }}}

# Libstdc++ from GCC {{{
printf "(%3d/%3d) Extracting GCC (for libstdc++)..." $CUR_TASK $NUM_TASKS
tar -xf gcc-8.2.0.tar.xz
printf "done!\n"; ((++CUR_TASK))

mkdir -v gcc-8.2.0/build &&  pushd gcc-8.2.0/build

printf "(%3d/%3d) Compiling libstdc++..." $CUR_TASK $NUM_TASKS
../libstdc++-v3/configure		\
	--host=$LFS_TGT				\
	--prefix=/tools				\
	--disable-multilib			\
	--disable-nls				\
	--disable-libstdcxx-threads	\
	--disable-libstdcxx-pch		\
	--with-gxx-include-dir=/tools/$LFS_TGT/include/c++/8.2.0 \
								>> "$LOG_DIR/libstdc++.log"
make $MAKEFLAGS					>> "$LOG_DIR/libstdc++.log"
make $MAKEFLAGS install			>> "$LOG_DIR/libstdc++.log"
printf "done!\n"; ((++CUR_TASK))

# Leave gcc/build, return to sources
popd

printf "(%3d/%3d) Cleaning GCC (for libstdc++)..." $CUR_TASK $NUM_TASKS
rm -rf gcc-8.2.0
printf "done!\n"; ((++CUR_TASK))
# }}}

# Binutils pass 2 {{{
printf "(%3d/%3d) Extracting binutils again..." $CUR_TASK $NUM_TASKS
tar -xf binutils-2.32.tar.xz
printf "done!\n"; ((++CUR_TASK))

# Binutils wants to be made in a build folder
mkdir -v binutils-2.32/build && pushd binutils-2.32/build

printf "(%3d/%3d) Compiling binutils again..." $CUR_TASK $NUM_TASKS

CC=$LFS_TGT-gcc					\
AR=$LFS_TGT-ar					\
RANLIB=$LFS_TGT-ranlib			\
../configure					\
	--prefix=/tools				\
	--disable-nls				\
	--disable-werror			\
	--with-lib-path=/tools/lib	\
	--with-sysroot				>> "$LOG_DIR/binutils_pass2.log"
make $MAKEFLAGS					>> "$LOG_DIR/binutils_pass2.log"
make $MAKEFLAGS install			>> "$LOG_DIR/binutils_pass2.log"

# Prepares the linker for readjusting later
make -C ld clean
make -C ld LIB_PATH=/usr/lib:/lib
cp -v ld/ld-new /tools/bin

printf "done!\n"; ((++CUR_TASK))

# Leave binutils folder, back to sources
popd

printf "(%3d/%3d) Cleaning binutils again..." $CUR_TASK $NUM_TASKS
rm -rf binutils-2.32
printf "done!\n"; ((++CUR_TASK))
# }}}

# GCC Pass 2 {{{
printf "(%3d/%3d) Extracting GCC again (pass 2!)..." $CUR_TASK $NUM_TASKS
tar -xf gcc-8.2.0.tar.xz
printf "done!\n"; ((++CUR_TASK))

# pushd into gcc folder so I can extract other things into here
pushd gcc-8.2.0

printf "(%3d/%3d) Extracting mpfr again..." $CUR_TASK $NUM_TASKS
tar -xf ../mpfr-4.0.2.tar.xz
mv mpfr-4.0.2 mpfr
printf "done!\n"; ((++CUR_TASK))

printf "(%3d/%3d) Extracting gmp again..." $CUR_TASK $NUM_TASKS
tar -xf ../gmp-6.1.2.tar.xz
mv gmp-6.1.2 gmp
printf "done!\n"; ((++CUR_TASK))

printf "(%3d/%3d) Extracting mpc again..." $CUR_TASK  $NUM_TASKS
tar -xf ../mpc-1.1.0.tar.gz
mv mpc-1.1.0 mpc
printf "done!\n"; ((++CUR_TASK))

# Generate the limits.h file
cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h

# The following command will change the location of GCC's default dynamic
# linker to use the one installed in /tools. It also removes /usr/include
# from GCC's include search path.
# http://www.linuxfromscratch.org/lfs/view/stable/chapter05/gcc-pass1.html
for file in gcc/config/{linux,i386/linux{,64}}.h
do
	cp -uv $file{,.orig}
	sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
		-e 's@/usr@/tools@g' $file.orig > $file
	echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
	touch $file.orig
done

# I assume this will assist with cross compilation later. I'm not sure why I
# would do this like this yet.
case $(uname -m) in
	x86_64)
		sed -e '/m64=/s/lib64/lib/' \
			-i.orig gcc/config/i386/t-linux64
		;;
esac

mkdir -v build && pushd build

printf "(%3d/%3d) Compiling gcc again (part 2!!)..." $CUR_TASK $NUM_TASKS

CC=$LFS_TGT-gcc										\
CXX=$LFS_TGT-g++									\
AR=$LFS_TGT-ar										\
RANLIB=$LFS_TGT-ranlib								\
../configure										\
	--prefix=/tools									\
	--with-local-prefix=/tools						\
	--with-native-system-header-dir=/tools/include	\
	--enable-languages=c,c++						\
	--disable-libstdcxx-pch							\
	--disable-multilib								\
	--disable-bootstrap								\
	--disable-libgomp								>> "$LOG_DIR/gcc_pass2.log"
make $MAKEFLAGS										>> "$LOG_DIR/gcc_pass2.log"
make $MAKEFLAGS install								>> "$LOG_DIR/gcc_pass2.log"

# Link gcc to cc, the system c compiler
ln -sv gcc /tools/bin/cc

printf "done!\n"; ((++CUR_TASK))

# Back out of build
popd

# Back out of GCC
popd

# Test GCC {{{
printf "Test that gcc is working...\n"
echo 'int main(){}' > dummy.c
cc dummy.c
readelf -l a.out | grep --color=auto ': /tools'
printf "Does the above line say \"Requesting program interpreter\"? (Y/n): "
read CONTINUE
if [ -z "$CONTINUE" ] || [ "$CONTINUE" = 'y' ] || [ "$CONTINUE" = 'Y' ]; then
	echo "Moving along then"
else
	echo "Alright, figure it out. Quitting (without deleting dummy.c or a.out)..."
	exit
fi
rm dummy.c a.out
# }}}

printf "(%3d/%3d) Cleaning gcc again..." $CUR_TASK $NUM_TASKS
rm -rf gcc-8.2.0
printf "done!\n"; ((++CUR_TASK))

# }}}

# TCL {{{
printf "(%3d/%3d) Extracting TCL..." $CUR_TASK $NUM_TASKS
tar -xf tcl8.6.9-src.tar.gz
printf "done!\n"; ((++CUR_TASK))

pushd tcl8.6.9/unix
printf "(%3d/%3d) Compiling TCL..." $CUR_TASK $NUM_TASKS
./configure --prefix=/tools				>> "$LOG_DIR/tcl.log"
make $MAKEFLAGS							>> "$LOG_DIR/tcl.log"
make $MAKEFLAGS install					>> "$LOG_DIR/tcl.log"
chmod -v u+w /tools/lib/libtcl8.6.so
make $MAKEFLAGS install-private-headers	>> "$LOG_DIR/tcl.log"
ln -sv tclsh8.6 /tools/bin/tclsh
printf "done!\n"; ((++CUR_TASK))
popd

printf "(%3d/%3d) Cleaning TCL..." $CUR_TASK $NUM_TASKS
rm -rf tcl8.6.9
printf "done!\n"; ((++CUR_TASK))
# }}}

# Expect {{{
printf "(%3d/%3d) Extracting expect..." $CUR_TASK $NUM_TASKS
tar -xf expect5.45.4.tar.gz
printf "done!\n"; ((++CUR_TASK))

pushd expect5.45.4
printf "(%3d/%3d) Compiling expect..." $CUR_TASK $NUM_TASKS

cp -v configure{,.orig}
sed 's:/usr/local/bin:/bin:' configure.orig > configure

./configure					\
	--prefix=/tools			\
	--with-tcl=/tools/lib	\
	--with-tclinclude=/tools/include	>> "$LOG_DIR/expect.log"
make $MAKEFLAGS							>> "$LOG_DIR/expect.log"
make $MAKEFLAGS SCRIPTS="" install		>> "$LOG_DIR/expect.log"
printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning expect..." $CUR_TASK $NUM_TASKS
rm -rf expect5.45.4
printf "done!\n"; ((++CUR_TASK))
# }}}

# DejaGNU {{{
printf "(%3d/%3d) Extracting DejaGNU..." $CUR_TASK $NUM_TASKS
tar -xf dejagnu-1.6.2.tar.gz
printf "done!\n"; ((++CUR_TASK))

pushd dejagnu-1.6.2
printf "(%3d/%3d) Compiling DejaGNU..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools		>> "$LOG_DIR/DejaGNU.log"
make $MAKEFLAGS install			>> "$LOG_DIR/DejaGNU.log"

# Test what we've done
make check						>> "$LOG_DIR/DejaGNU.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning DejaGNU..." $CUR_TASK $NUM_TASKS
rm -rf dejagnu-1.6.2
printf "done!\n"; ((++CUR_TASK))
# }}}

# m4 {{{
printf "(%3d/%3d) Extracting m4..." $CUR_TASK $NUM_TASKS
tar -xf m4-1.4.18.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd m4-1.4.18
printf "(%3d/%3d) Compiling ..." $CUR_TASK $NUM_TASKS

# Make some fixes required by glibc-2.28
sed -i 's/IO_ftrylockfile/IO_EOF_SEEN/' lib/*.c
echo "#define _IO_IN_BACKUP 0x100" >> lib/stdio-impl.h

./configure --prefix=/tools		>> "$LOG_DIR/m4.log"
make $MAKEFLAGS					>> "$LOG_DIR/m4.log"
make $MAKEFLAGS install			>> "$LOG_DIR/m4.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning m4..." $CUR_TASK $NUM_TASKS
rm -rf m4-1.4.18
printf "done!\n"; ((++CUR_TASK))
# }}}

# Ncurses {{{
printf "(%3d/%3d) Extracting ncurses..." $CUR_TASK $NUM_TASKS
tar -xf ncurses-6.1.tar.gz
printf "done!\n"; ((++CUR_TASK))

pushd ncurses-6.1
printf "(%3d/%3d) Compiling ncurses..." $CUR_TASK $NUM_TASKS

./configure					\
	--prefix=/tools			\
	--with-shared			\
	--without-debug			\
	--without-ada			\
	--enable-widec			\
	--enable-overwrite		>> "$LOG_DIR/ncurses.log"
make $MAKEFLAGS				>> "$LOG_DIR/ncurses.log"
make $MAKEFLAGS install		>> "$LOG_DIR/ncurses.log"
ln -sv libncursesw.so /tools/lib/libncurses.so

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning ncurses..." $CUR_TASK $NUM_TASKS
rm -rf ncurses-6.1
printf "done!\n"; ((++CUR_TASK))
# }}}

# Bash {{{
printf "(%3d/%3d) Extracting bash..." $CUR_TASK $NUM_TASKS
tar -xf bash-5.0.tar.gz
printf "done!\n"; ((++CUR_TASK))

pushd bash-5.0
printf "(%3d/%3d) Compiling bash..." $CUR_TASK $NUM_TASKS

./configure					\
	--prefix=/tools			\
	--without-bash-malloc	>> "$LOG_DIR/bash.log"
make $MAKEFLAGS				>> "$LOG_DIR/bash.log"
make $MAKEFLAGS install		>> "$LOG_DIR/bash.log"

# Symlink sh to bash. Yuck.
# When I'm not so rigidly following the book, this will most certainly be dash.
ln -sv bash /tools/bin/sh

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning bash..." $CUR_TASK $NUM_TASKS
rm -rf bash-5.0
printf "done!\n"; ((++CUR_TASK))
# }}}

# Bison {{{
printf "(%3d/%3d) Extracting bison..." $CUR_TASK $NUM_TASKS
tar -xf bison-3.3.2.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd bison-3.3.2
printf "(%3d/%3d) Compiling bison..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools		>> "$LOG_DIR/bison.log"
make $MAKEFLAGS			   		>> "$LOG_DIR/bison.log"
make $MAKEFLAGS install	   		>> "$LOG_DIR/bison.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning bison..." $CUR_TASK $NUM_TASKS
rm -rf bison-3.3.2
printf "done!\n"; ((++CUR_TASK))
# }}}

# Bzip2 {{{
printf "(%3d/%3d) Extracting bzip2..." $CUR_TASK $NUM_TASKS
tar -xf bzip2-1.0.6.tar.gz
printf "done!\n"; ((++CUR_TASK))

pushd bzip2-1.0.6
printf "(%3d/%3d) Compiling bzip2..." $CUR_TASK $NUM_TASKS

make $MAKEFLAGS							>> "$LOG_DIR/bzip2.log"
make $MAKEFLAGS PREFIX=/tools install	>> "$LOG_DIR/bzip2.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning bzip2..." $CUR_TASK $NUM_TASKS
rm -rf bzip2-1.0.6
printf "done!\n"; ((++CUR_TASK))
# }}}

# Coreutils {{{
printf "(%3d/%3d) Extracting coreutils..." $CUR_TASK $NUM_TASKS
tar -xf coreutils-8.30.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd coreutils-8.30
printf "(%3d/%3d) Compiling coreutils..." $CUR_TASK $NUM_TASKS

./configure								\
	--prefix=/tools						\
	--enable-install-program=hostname	>> "$LOG_DIR/coreutils.log"
make $MAKEFLAGS							>> "$LOG_DIR/coreutils.log"
make $MAKEFLAGS install					>> "$LOG_DIR/coreutils.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning coreutils..." $CUR_TASK $NUM_TASKS
rm -rf coreutils-8.30
printf "done!\n"; ((++CUR_TASK))
# }}}

# Diffutils {{{
printf "(%3d/%3d) Extracting diffutils..." $CUR_TASK $NUM_TASKS
tar -xf diffutils-3.7.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd diffutils-3.7
printf "(%3d/%3d) Compiling diffutils..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools		>> "$LOG_DIR/diffutils.log"
make $MAKEFLAGS					>> "$LOG_DIR/diffutils.log"
make $MAKEFLAGS install			>> "$LOG_DIR/diffutils.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning diffutils..." $CUR_TASK $NUM_TASKS
rm -rf diffutils-3.7
printf "done!\n"; ((++CUR_TASK))
# }}}

# File {{{
printf "(%3d/%3d) Extracting file..." $CUR_TASK $NUM_TASKS
tar -xf file-5.36.tar.gz
printf "done!\n"; ((++CUR_TASK))

pushd file-5.36
printf "(%3d/%3d) Compiling file..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools				>> "$LOG_DIR/file.log"
make $MAKEFLAGS							>> "$LOG_DIR/file.log"
make $MAKEFLAGS install					>> "$LOG_DIR/file.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning file..." $CUR_TASK $NUM_TASKS
rm -rf file-5.36
printf "done!\n"; ((++CUR_TASK))
# }}}

# Findutils {{{
printf "(%3d/%3d) Extracting findutils..." $CUR_TASK $NUM_TASKS
tar -xf findutils-4.6.0.tar.gz
printf "done!\n"; ((++CUR_TASK))

pushd findutils-4.6.0
printf "(%3d/%3d) Compiling findutils..." $CUR_TASK $NUM_TASKS

sed -i 's/IO_ftrylockfile/IO_EOF_SEEN/' gl/lib/*.c
sed -i '/unistd/a #include <sys/sysmacros.h>' gl/lib/mountlist.c
echo "#define _IO_IN_BACKUP 0x100" >> gl/lib/stdio-impl.h

./configure --prefix=/tools				>> "$LOG_DIR/findutils.log"
make $MAKEFLAGS							>> "$LOG_DIR/findutils.log"
make $MAKEFLAGS install					>> "$LOG_DIR/findutils.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning findutils..." $CUR_TASK $NUM_TASKS
rm -rf findutils-4.6.0
printf "done!\n"; ((++CUR_TASK))
# }}}

# Gawk {{{
printf "(%3d/%3d) Extracting gawk..." $CUR_TASK $NUM_TASKS
tar -xf gawk-4.2.1.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd gawk-4.2.1
printf "(%3d/%3d) Compiling gawk..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools				>> "$LOG_DIR/gawk.log"
make $MAKEFLAGS							>> "$LOG_DIR/gawk.log"
make $MAKEFLAGS install					>> "$LOG_DIR/gawk.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning gawk..." $CUR_TASK $NUM_TASKS
rm -rf gawk-4.2.1
printf "done!\n"; ((++CUR_TASK))
# }}}

# Gettext {{{
printf "(%3d/%3d) Extracting gettext..." $CUR_TASK $NUM_TASKS
tar -xf gettext-0.19.8.1.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd gettext-0.19.8.1
printf "(%3d/%3d) Compiling gettext..." $CUR_TASK $NUM_TASKS

cd gettext-tools
EMACS="no" ./configure				\
	--prefix=/tools					\
	--disable-shared				>> "$LOG_DIR/gettext.log"
make $MAKEFLAGS -C gnulib-lib		>> "$LOG_DIR/gettext.log"
make $MAKEFLAGS -C intl pluralx.c	>> "$LOG_DIR/gettext.log"
make $MAKEFLAGS -C src msgfmt		>> "$LOG_DIR/gettext.log"
make $MAKEFLAGS -C src msgmerge		>> "$LOG_DIR/gettext.log"
make $MAKEFLAGS -C src xgettext		>> "$LOG_DIR/gettext.log"

# Install the files by hand
cp -v src/{msgfmt,msgmerge,xgettext} /tools/bin

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning gettext..." $CUR_TASK $NUM_TASKS
rm -rf gettext-0.19.8.1
printf "done!\n"; ((++CUR_TASK))
# }}}

# Grep {{{
printf "(%3d/%3d) Extracting grep..." $CUR_TASK $NUM_TASKS
tar -xf grep-3.3.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd grep-3.3
printf "(%3d/%3d) Compiling grep..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools				>> "$LOG_DIR/grep.log"
make $MAKEFLAGS							>> "$LOG_DIR/grep.log"
make $MAKEFLAGS install					>> "$LOG_DIR/grep.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning grep..." $CUR_TASK $NUM_TASKS
rm -rf grep-3.3
printf "done!\n"; ((++CUR_TASK))
# }}}

# Gzip {{{
printf "(%3d/%3d) Extracting gzip..." $CUR_TASK $NUM_TASKS
tar -xf gzip-1.10.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd gzip-1.10
printf "(%3d/%3d) Compiling gzip..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools				>> "$LOG_DIR/gzip.log"
make $MAKEFLAGS							>> "$LOG_DIR/gzip.log"
make $MAKEFLAGS install					>> "$LOG_DIR/gzip.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning gzip..." $CUR_TASK $NUM_TASKS
rm -rf gzip-1.10
printf "done!\n"; ((++CUR_TASK))
# }}}

# Make {{{
printf "(%3d/%3d) Extracting make..." $CUR_TASK $NUM_TASKS
tar -xf make-4.2.1.tar.bz2
printf "done!\n"; ((++CUR_TASK))

pushd make-4.2.1
printf "(%3d/%3d) Compiling make..." $CUR_TASK $NUM_TASKS

# Apparently this is an error work around. looks like diff notation
sed -i '211,217 d; 219,229 d; 232 d' glob/glob.c

./configure					\
	--prefix=/tools			\
	--without-guile			>> "$LOG_DIR/make.log"
make $MAKEFLAGS				>> "$LOG_DIR/make.log"
make $MAKEFLAGS install		>> "$LOG_DIR/make.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning make..." $CUR_TASK $NUM_TASKS
rm -rf make-4.2.1
printf "done!\n"; ((++CUR_TASK))
# }}}

# Patch {{{
printf "(%3d/%3d) Extracting patch..." $CUR_TASK $NUM_TASKS
tar -xf patch-2.7.6.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd patch-2.7.6
printf "(%3d/%3d) Compiling patch..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools				>> "$LOG_DIR/patch.log"
make $MAKEFLAGS							>> "$LOG_DIR/patch.log"
make $MAKEFLAGS install					>> "$LOG_DIR/patch.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning patch..." $CUR_TASK $NUM_TASKS
rm -rf patch-2.7.6
printf "done!\n"; ((++CUR_TASK))
# }}}

# Perl {{{
printf "(%3d/%3d) Extracting perl..." $CUR_TASK $NUM_TASKS
tar -xf perl-5.28.1.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd perl-5.28.1
printf "(%3d/%3d) Compiling perl..." $CUR_TASK $NUM_TASKS

sh Configure		\
	-des			\
	-Dprefix=/tools	\
	-Dlibs=-lm		\
	-Uloclibpth		\
	-Ulocincpth		>> "$LOG_DIR/perl.log"
make $MAKEFLAGS		>> "$LOG_DIR/perl.log"

# Install files manually
cp -v perl cpan/podlators/scripts/pod2man /tools/bin
mkdir -pv /tools/lib/perl5/5.28.1
cp -Rv lib/* /tools/lib/perl5/5.28.1

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning perl..." $CUR_TASK $NUM_TASKS
rm -rf perl-5.28.1
printf "done!\n"; ((++CUR_TASK))
# }}}

# Python {{{
printf "(%3d/%3d) Extracting python..." $CUR_TASK $NUM_TASKS
tar -xf Python-3.7.2.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd Python-3.7.2
printf "(%3d/%3d) Compiling python..." $CUR_TASK $NUM_TASKS

# This short circuits a function by adding a return statement right after it's
# def line. The syntax is a bit confusing, but it searches for
# def add_multiarch_paths
# Then it adds a new line with eight spaces and a return (python needs spaces)
sed -i '/def add_multiarch_paths/a \        return' setup.py

./configure					\
	--prefix=/tools			\
	--without-ensurepip		>> "$LOG_DIR/python.log"
make $MAKEFLAGS				>> "$LOG_DIR/python.log"
make $MAKEFLAGS install		>> "$LOG_DIR/python.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning python..." $CUR_TASK $NUM_TASKS
rm -rf Python-3.7.2
printf "done!\n"; ((++CUR_TASK))
# }}}

# Sed {{{
printf "(%3d/%3d) Extracting sed..." $CUR_TASK $NUM_TASKS
tar -xf sed-4.7.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd sed-4.7
printf "(%3d/%3d) Compiling sed..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools				>> "$LOG_DIR/sed.log"
make $MAKEFLAGS							>> "$LOG_DIR/sed.log"
make $MAKEFLAGS install					>> "$LOG_DIR/sed.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning sed..." $CUR_TASK $NUM_TASKS
rm -rf sed-4.7
printf "done!\n"; ((++CUR_TASK))
# }}}

# Tar {{{
printf "(%3d/%3d) Extracting tar..." $CUR_TASK $NUM_TASKS
tar -xf tar-1.31.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd tar-1.31
printf "(%3d/%3d) Compiling tar..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools				>> "$LOG_DIR/tar.log"
make $MAKEFLAGS							>> "$LOG_DIR/tar.log"
make $MAKEFLAGS install					>> "$LOG_DIR/tar.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning tar..." $CUR_TASK $NUM_TASKS
rm -rf tar-1.31
printf "done!\n"; ((++CUR_TASK))
# }}}

# Texinfo {{{
printf "(%3d/%3d) Extracting texinfo..." $CUR_TASK $NUM_TASKS
tar -xf texinfo-6.5.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd texinfo-6.5
printf "(%3d/%3d) Compiling texinfo..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools				>> "$LOG_DIR/texinfo.log"
make $MAKEFLAGS							>> "$LOG_DIR/texinfo.log"
make $MAKEFLAGS install					>> "$LOG_DIR/texinfo.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning texinfo..." $CUR_TASK $NUM_TASKS
rm -rf texinfo-6.5
printf "done!\n"; ((++CUR_TASK))
# }}}

# Xz {{{
printf "(%3d/%3d) Extracting xz..." $CUR_TASK $NUM_TASKS
tar -xf xz-5.2.4.tar.xz
printf "done!\n"; ((++CUR_TASK))

pushd xz-5.2.4
printf "(%3d/%3d) Compiling xz..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools				>> "$LOG_DIR/xz.log"
make $MAKEFLAGS							>> "$LOG_DIR/xz.log"
make $MAKEFLAGS install					>> "$LOG_DIR/xz.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning xz..." $CUR_TASK $NUM_TASKS
rm -rf xz-5.2.4
printf "done!\n"; ((++CUR_TASK))
# }}}

# Return to previous working direcory
popd

exit
# Below here lie a template, and a list of package tarballs for easy copying
# **************************************************************************** #

# TARGET {{{
printf "(%3d/%3d) Extracting TARGET..." $CUR_TASK $NUM_TASKS
tar -xf 
printf "done!\n"; ((++CUR_TASK))

pushd 
printf "(%3d/%3d) Compiling TARGET..." $CUR_TASK $NUM_TASKS

./configure --prefix=/tools				>> "$LOG_DIR/TARGET.log"
make $MAKEFLAGS							>> "$LOG_DIR/TARGET.log"
make $MAKEFLAGS install					>> "$LOG_DIR/TARGET.log"

printf "done!\n"; ((++CUR_TASK))

# Back to sources
popd

printf "(%3d/%3d) Cleaning TARGET..." $CUR_TASK $NUM_TASKS
rm -rf 
printf "done!\n"; ((++CUR_TASK))
# }}}

# Packages {{{
XML-Parser-2.44.tar.gz
acl-2.2.53.tar.gz
attr-2.4.48.tar.gz
autoconf-2.69.tar.xz
automake-1.16.1.tar.xz
bc-1.07.1.tar.gz
bzip2-1.0.6-install_docs-1.patch
check-0.12.0.tar.gz
coreutils-8.30-i18n-1.patch
dbus-1.12.12.tar.gz
e2fsprogs-1.44.5.tar.gz
elfutils-0.176.tar.bz2
eudev-3.2.7.tar.gz
expat-2.2.6.tar.bz2
flex-2.6.4.tar.gz
gdbm-1.18.1.tar.gz
glibc-2.29-fhs-1.patch
gperf-3.1.tar.gz
groff-1.22.4.tar.gz
grub-2.02.tar.xz
iana-etc-2.30.tar.bz2
inetutils-1.9.4.tar.xz
intltool-0.51.0.tar.gz
iproute2-4.20.0.tar.xz
kbd-2.0.4-backspace-1.patch
kbd-2.0.4.tar.xz
kmod-26.tar.xz
less-530.tar.gz
lfs-bootscripts-20180820.tar.bz2
libcap-2.26.tar.xz
libffi-3.2.1.tar.gz
libpipeline-1.5.1.tar.gz
libtool-2.4.6.tar.xz
man-db-2.8.5.tar.xz
man-pages-4.16.tar.xz
md5sums
meson-0.49.2.tar.gz
ninja-1.9.0.tar.gz
openssl-1.1.1a.tar.gz
pkg-config-0.29.2.tar.gz
procps-ng-3.3.15.tar.xz
psmisc-23.2.tar.xz
python-3.7.2-docs-html.tar.bz2
readline-8.0.tar.gz
shadow-4.6.tar.xz
sysklogd-1.5.1.tar.gz
sysvinit-2.93-consolidated-1.patch
sysvinit-2.93.tar.xz
tcl8.6.9-src.tar.gz
tzdata2018i.tar.gz
udev-lfs-20171102.tar.bz2
util-linux-2.33.1.tar.xz
vim-8.1.tar.bz2
zlib-1.2.11.tar.xz
# }}}

# vim: foldmethod=marker foldmarker={{{,}}}
